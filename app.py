from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
import googlemaps
import logging
import asyncio
import aiohttp
from config import TELEGRAM_TOKEN, GOOGLE_MAPS_API_KEY, OPENWEATHER_API_KEY

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# Telegram Bot –∏ Google Maps API
bot = Bot(token=TELEGRAM_TOKEN)
gmaps = googlemaps.Client(key=GOOGLE_MAPS_API_KEY)

# –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = Application.builder().token(TELEGRAM_TOKEN).build()


# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}
user_history = {}

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp
async def fetch_weather(lat, lon):
    try:
        async with aiohttp.ClientSession() as session:
            weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            async with session.get(weather_url) as response:
                response_data = await response.json()
                return {
                    "description": response_data["weather"][0]["description"],
                    "temp": response_data["main"]["temp"]
                }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenWeather: {e}")
        return None
    
def create_navigation_buttons():
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    button_start = InlineKeyboardButton("–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç", callback_data="start_new_route")
    button_history = InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="show_history")
    button_cancel = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="cancel_request")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup([[button_start, button_history], [button_cancel]])
    
    return keyboard

# –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
async def handle_button_click(update: Update, context):
    query = update.callback_query
    user_id = query.from_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç"
    if query.data == "start_new_route":
        user_state[user_id] = {"step": "origin"}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"
    elif query.data == "show_history":
        await history(update, context)  # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
    elif query.data == "cancel_request":
        if user_id in user_state:
            del user_state[user_id]  # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            await query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
            await query.edit_message_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")

# –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application.add_handler(CallbackQueryHandler(handle_button_click))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏



async def start(update: Update, context):
    user_id = update.message.from_user.id
    user_state[user_id] = {"step": "origin"}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –º–∞—Ä—à—Ä—É—Ç–æ–º –≤ –ê—Å—Ç–∞–Ω–µ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂—É –æ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        reply_markup=create_navigation_buttons()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    )


async def handle_message(update: Update, context):
    user_id = update.message.from_user.id
    user_message = update.message.text

    if user_id in user_state:
        state = user_state[user_id]

        if state["step"] == "origin":
            user_state[user_id]["origin"] = user_message
            user_state[user_id]["step"] = "destination"
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
        elif state["step"] == "destination":
            user_state[user_id]["destination"] = user_message
            await calculate_route(update, context, user_id)
            del user_state[user_id]
    else:
        await update.message.reply_text("–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

async def calculate_route(update: Update, context, user_id):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏
        origin_input = user_state[user_id]["origin"]
        destination_input = user_state[user_id]["destination"]

        origin = await normalize_address(origin_input)
        destination = await normalize_address(destination_input)

        if not origin or not destination:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–¥–∏–Ω –∏–∑ –∞–¥—Ä–µ—Å–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ê—Å—Ç–∞–Ω–µ."
            )
            return

        # –ó–∞–ø—Ä–æ—Å –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        modes = ["driving", "walking", "transit"]
        routes = {}

        for mode in modes:
            directions_params = {
                "origin": origin["formatted_address"],
                "destination": destination["formatted_address"],
                "mode": mode,
                "departure_time": "now",
                "traffic_model": "best_guess",
            }

            result = gmaps.directions(**directions_params)
            if result:
                routes[mode] = result[0]['legs'][0]

        if not routes:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å–∞.")
            return

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        driving = routes.get("driving")
        walking = routes.get("walking")
        transit = routes.get("transit")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏
        weather_conditions = await get_weather_conditions(driving or walking or transit)
        weather_warnings = generate_weather_warnings(weather_conditions)

        # –ê–Ω–∞–ª–∏–∑ –¥–æ—Ä–æ–∂–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏
        traffic_recommendations = generate_traffic_recommendations(driving) if driving else "–î–æ—Ä–æ–∂–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å."

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        travel_times = {}
        if driving:
            travel_times["driving"] = driving['duration']['value']
        if walking:
            travel_times["walking"] = walking['duration']['value']
        if transit:
            travel_times["transit"] = transit['duration']['value']

        fastest_mode = min(travel_times, key=travel_times.get)
        fastest_time = travel_times[fastest_mode]

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        if user_id not in user_history:
            user_history[user_id] = []
        user_history[user_id].append({
            "origin": origin["formatted_address"],
            "destination": destination["formatted_address"],
            "distance": driving["distance"]["text"] if driving else "N/A",
            "duration": driving["duration"]["text"] if driving else "N/A",
            "traffic": driving.get("duration_in_traffic", {}).get("text", "N/A") if driving else "N/A",
            "weather": weather_conditions,
        })

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –æ—Ç {origin['formatted_address']} –¥–æ {destination['formatted_address']}:\n\n"

        if driving:
            traffic = driving.get('duration_in_traffic', {}).get('text', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            driving_link = f"https://www.google.com/maps/dir/?api=1&origin={origin['formatted_address'].replace(' ', '+')}&destination={destination['formatted_address'].replace(' ', '+')}&travelmode=driving"
            response += (f"üöó –ù–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:\n"
                         f"- –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {driving['distance']['text']}\n"
                         f"- –í—Ä–µ–º—è: {driving['duration']['text']}\n"
                         f"- –° —É—á–µ—Ç–æ–º –ø—Ä–æ–±–æ–∫: {traffic}\n"
                         f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ Google Maps]({driving_link})\n\n")

        if walking:
            walking_link = f"https://www.google.com/maps/dir/?api=1&origin={origin['formatted_address'].replace(' ', '+')}&destination={destination['formatted_address'].replace(' ', '+')}&travelmode=walking"
            response += (f"üö∂ –ü–µ—à–∫–æ–º:\n"
                         f"- –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {walking['distance']['text']}\n"
                         f"- –í—Ä–µ–º—è: {walking['duration']['text']}\n"
                         f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ Google Maps]({walking_link})\n\n")

        if transit:
            transit_details = transit['steps'][0].get('transit_details', {})
            transit_link = f"https://www.google.com/maps/dir/?api=1&origin={origin['formatted_address'].replace(' ', '+')}&destination={destination['formatted_address'].replace(' ', '+')}&travelmode=transit"
            if transit_details:
                line_name = transit_details['line']['short_name']
                departure_stop = transit_details['departure_stop']['name']
                arrival_stop = transit_details['arrival_stop']['name']
                response += (f"üöå –ù–∞ –∞–≤—Ç–æ–±—É—Å–µ:\n"
                             f"- –ú–∞—Ä—à—Ä—É—Ç: {line_name}\n"
                             f"- –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {departure_stop}\n"
                             f"- –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–±—ã—Ç–∏—è: {arrival_stop}\n"
                             f"- –í—Ä–µ–º—è –≤ –ø—É—Ç–∏: {transit['duration']['text']}\n"
                             f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ Google Maps]({transit_link})\n\n")
            else:
                response += (f"üöå –ù–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ:\n"
                             f"- –í—Ä–µ–º—è –≤ –ø—É—Ç–∏: {transit['duration']['text']}\n"
                             f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ Google Maps]({transit_link})\n\n")

        # –£–∫–∞–∑–∞–Ω–∏–µ —Å–∞–º–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–ø–æ—Å–æ–±–∞
        mode_names = {
            "driving": "–Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
            "walking": "–ø–µ—à–∫–æ–º",
            "transit": "–Ω–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ"
        }
        response += f"‚ú® –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –¥–æ–±—Ä–∞—Ç—å—Å—è: {mode_names[fastest_mode]} ({fastest_time // 60} –º–∏–Ω).\n\n"

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        response += f"üå§ –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:\n{weather_warnings}\n\n"
        response += f"üö¶ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Ä–æ–∂–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ:\n{traffic_recommendations}\n"

        await update.message.reply_markdown(response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
async def clear_history(update: Update, context):
    user_id = update.message.from_user.id
    if user_id in user_history:
        user_history[user_id] = []
        await update.message.reply_text("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
application.add_handler(CommandHandler("clearhistory", clear_history))

async def get_weather_conditions(route):
    try:
        start_location = route['start_location']
        end_location = route['end_location']

        weather_start = await fetch_weather(start_location['lat'], start_location['lng'])
        weather_end = await fetch_weather(end_location['lat'], end_location['lng'])

        return {"start": weather_start, "end": weather_end}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

async def normalize_address(address):
    try:
        geocode_result = gmaps.geocode(address)
        if geocode_result:
            formatted_address = geocode_result[0]["formatted_address"]
            location = geocode_result[0]["geometry"]["location"]

            if "Astana" not in formatted_address and "–ê—Å—Ç–∞–Ω–∞" not in formatted_address:
                return None

            return {
                "formatted_address": formatted_address,
                "location": location
            }
        else:
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ '{address}': {e}")
        return None

def generate_weather_warnings(weather_conditions):
    warnings = []
    for location, weather in weather_conditions.items():
        if weather:
            description = weather["description"]
            temp = weather["temp"]
            if "–¥–æ–∂–¥—å" in description:
                warnings.append(f"- –ù–∞ {location} –∏–¥–µ—Ç –¥–æ–∂–¥—å, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.")
            if "—Å–Ω–µ–≥" in description:
                warnings.append(f"- –ù–∞ {location} —Å–Ω–µ–≥, –≤–æ–∑–º–æ–∂–Ω–∞ –≥–æ–ª–æ–ª–µ–¥–∏—Ü–∞.")
            if temp > 30:
                warnings.append(f"- –ù–∞ {location} –∂–∞—Ä–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã.")
    return "\n".join(warnings) if warnings else "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ."

def generate_traffic_recommendations(route):
    try:
        duration = route['duration']['value']
        duration_in_traffic = route['duration_in_traffic']['value']
        traffic_delay = duration_in_traffic - duration

        recommendations = []
        if traffic_delay > 600:
            recommendations.append("- –ù–∞ –º–∞—Ä—à—Ä—É—Ç–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–∫–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç.")
        if duration_in_traffic > 3600:
            recommendations.append("- –ü—É—Ç—å –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ —á–∞—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è.")
        return "\n".join(recommendations) if recommendations else "–î–æ—Ä–æ–∂–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞—è."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Ä–æ–∂–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ä–æ–∂–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É."

async def history(update: Update, context):
    user_id = update.message.from_user.id
    if user_id in user_history and user_history[user_id]:
        response = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        for idx, entry in enumerate(user_history[user_id], 1):
            response += (f"{idx}. –û—Ç {entry['origin']} –¥–æ {entry['destination']}:\n"
                         f"   - –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {entry['distance']}\n"
                         f"   - –í—Ä–µ–º—è –±–µ–∑ –ø—Ä–æ–±–æ–∫: {entry['duration']}\n"
                         f"   - –í—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–æ–∫: {entry['traffic']}\n")
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤.")

async def cancel(update: Update, context):
    user_id = update.message.from_user.id
    if user_id in user_state:
        del user_state[user_id]
        await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("history", history))
application.add_handler(CommandHandler("cancel", cancel))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

@app.route("/")
def index():
    return "Telegram Bot is running!"

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    application.update_queue.put_nowait(update)
    return "OK"

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(application.run_polling())
    app.run(port=5000)
